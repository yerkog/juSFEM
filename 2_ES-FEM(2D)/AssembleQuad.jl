function AssembleQuad(KE,ke,i,j,m,p)
    KE[2*i-1,2*i-1] = KE[2*i-1,2*i-1] + ke[1,1]
    KE[2*i-1,2*i] = KE[2*i-1,2*i] + ke[1,2]
    KE[2*i-1,2*j-1] = KE[2*i-1,2*j-1] + ke[1,3]
    KE[2*i-1,2*j] = KE[2*i-1,2*j] + ke[1,4]
    KE[2*i-1,2*m-1] = KE[2*i-1,2*m-1] + ke[1,5]
    KE[2*i-1,2*m] = KE[2*i-1,2*m] + ke[1,6]
    KE[2*i-1,2*p-1] = KE[2*i-1,2*p-1] + ke[1,7]
    KE[2*i-1,2*p] = KE[2*i-1,2*p] + ke[1,8]
    KE[2*i,2*i-1] = KE[2*i,2*i-1] + ke[2,1]
    KE[2*i,2*i] = KE[2*i,2*i] + ke[2,2]
    KE[2*i,2*j-1] = KE[2*i,2*j-1] + ke[2,3]
    KE[2*i,2*j] = KE[2*i,2*j] + ke[2,4]
    KE[2*i,2*m-1] = KE[2*i,2*m-1] + ke[2,5]
    KE[2*i,2*m] = KE[2*i,2*m] + ke[2,6]
    KE[2*i,2*p-1] = KE[2*i,2*p-1] + ke[2,7]
    KE[2*i,2*p] = KE[2*i,2*p] + ke[2,8]
    KE[2*j-1,2*i-1] = KE[2*j-1,2*i-1] + ke[3,1]
    KE[2*j-1,2*i] = KE[2*j-1,2*i] + ke[3,2]
    KE[2*j-1,2*j-1] = KE[2*j-1,2*j-1] + ke[3,3]
    KE[2*j-1,2*j] = KE[2*j-1,2*j] + ke[3,4]
    KE[2*j-1,2*m-1] = KE[2*j-1,2*m-1] + ke[3,5]
    KE[2*j-1,2*m] = KE[2*j-1,2*m] + ke[3,6]
    KE[2*j-1,2*p-1] = KE[2*j-1,2*p-1] + ke[3,7]
    KE[2*j-1,2*p] = KE[2*j-1,2*p] + ke[3,8]
    KE[2*j,2*i-1] = KE[2*j,2*i-1] + ke[4,1]
    KE[2*j,2*i] = KE[2*j,2*i] + ke[4,2]
    KE[2*j,2*j-1] = KE[2*j,2*j-1] + ke[4,3]
    KE[2*j,2*j] = KE[2*j,2*j] + ke[4,4]
    KE[2*j,2*m-1] = KE[2*j,2*m-1] + ke[4,5]
    KE[2*j,2*m] = KE[2*j,2*m] + ke[4,6]
    KE[2*j,2*p-1] = KE[2*j,2*p-1] + ke[4,7]
    KE[2*j,2*p] = KE[2*j,2*p] + ke[4,8]
    KE[2*m-1,2*i-1] = KE[2*m-1,2*i-1] + ke[5,1]
    KE[2*m-1,2*i] = KE[2*m-1,2*i] + ke[5,2]
    KE[2*m-1,2*j-1] = KE[2*m-1,2*j-1] + ke[5,3]
    KE[2*m-1,2*j] = KE[2*m-1,2*j] + ke[5,4]
    KE[2*m-1,2*m-1] = KE[2*m-1,2*m-1] + ke[5,5]
    KE[2*m-1,2*m] = KE[2*m-1,2*m] + ke[5,6]
    KE[2*m-1,2*p-1] = KE[2*m-1,2*p-1] + ke[5,7]
    KE[2*m-1,2*p] = KE[2*m-1,2*p] + ke[5,8]
    KE[2*m,2*i-1] = KE[2*m,2*i-1] + ke[6,1]
    KE[2*m,2*i] = KE[2*m,2*i] + ke[6,2]
    KE[2*m,2*j-1] = KE[2*m,2*j-1] + ke[6,3]
    KE[2*m,2*j] = KE[2*m,2*j] + ke[6,4]
    KE[2*m,2*m-1] = KE[2*m,2*m-1] + ke[6,5]
    KE[2*m,2*m] = KE[2*m,2*m] + ke[6,6]
    KE[2*m,2*p-1] = KE[2*m,2*p-1] + ke[6,7]
    KE[2*m,2*p] = KE[2*m,2*p] + ke[6,8]
    KE[2*p-1,2*i-1] = KE[2*p-1,2*i-1] + ke[7,1]
    KE[2*p-1,2*i] = KE[2*p-1,2*i] + ke[7,2]
    KE[2*p-1,2*j-1] = KE[2*p-1,2*j-1] + ke[7,3]
    KE[2*p-1,2*j] = KE[2*p-1,2*j] + ke[7,4]
    KE[2*p-1,2*m-1] = KE[2*p-1,2*m-1] + ke[7,5]
    KE[2*p-1,2*m] = KE[2*p-1,2*m] + ke[7,6]
    KE[2*p-1,2*p-1] = KE[2*p-1,2*p-1] + ke[7,7]
    KE[2*p-1,2*p] = KE[2*p-1,2*p] + ke[7,8]
    KE[2*p,2*i-1] = KE[2*p,2*i-1] + ke[8,1]
    KE[2*p,2*i] = KE[2*p,2*i] + ke[8,2]
    KE[2*p,2*j-1] = KE[2*p,2*j-1] + ke[8,3]
    KE[2*p,2*j] = KE[2*p,2*j] + ke[8,4]
    KE[2*p,2*m-1] = KE[2*p,2*m-1] + ke[8,5]
    KE[2*p,2*m] = KE[2*p,2*m] + ke[8,6]
    KE[2*p,2*p-1] = KE[2*p,2*p-1] + ke[8,7]
    KE[2*p,2*p] = KE[2*p,2*p] + ke[8,8]
    return KE
end
#test pass
